apply plugin: 'com.android.application'

apply plugin: 'androidx.navigation.safeargs'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.simorgh.pregnancyapp"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        // Enabling multidex support.
        multiDexEnabled true
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains', module: 'annotations'
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    Default()
    Test()
    Calligraphy()
    RxJava()
    Gson()
    Room()
    Stetho()
    TransitionEveryWhere()
    HtmlTextView()
    LeakCanary()
    importModules()
    Dagger()
    butterKnife()
    SweetAlertDialogPersian()
}

private void importModules() {
    dependencies.implementation project(':database')
    dependencies.implementation project(':threadutils')
    dependencies.implementation project(':logger')
    dependencies.implementation project(':nicedatepicker')
    dependencies.implementation project(':calendarutil')
    dependencies.implementation project(':bloodtypepicker')
    dependencies.implementation project(':bottombar')
    dependencies.implementation project(':expandablelayout')
    dependencies.implementation project(':fluidslider')
    dependencies.implementation project(':timelineview')
    dependencies.implementation project(':weekslider')
    dependencies.implementation project(':persianmaterialdatepicker')
    dependencies.implementation project(':reportutil')
}

private void SweetAlertDialogPersian() {
    dependencies.implementation "com.github.sigma1326:SweetAlertDialogPersian:$rootProject.sweetAlertDialogPersianVersion"
}

private void butterKnife() {
    dependencies.implementation "com.jakewharton:butterknife:$rootProject.butterKnifeVersion"
    dependencies.annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterKnifeVersion"
}

private Dependency HtmlTextView() {
    dependencies.implementation "org.sufficientlysecure:html-textview:$rootProject.htmlTextViewVersion"
}

private Dependency TransitionEveryWhere() {
    dependencies.implementation "com.andkulikov:transitionseverywhere:$rootProject.transitionEveryWhereVersion"
}

private void LeakCanary() {
    dependencies.debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    dependencies.releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    // Optional, if you use support library fragments"
    dependencies.debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$rootProject.leakCanaryVersion"
    dependencies.androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"
}

private void Calligraphy() {
    //Calligraphy
    dependencies.implementation "io.github.inflationx:calligraphy3:$rootProject.calligraphyVersion"
    dependencies.implementation "io.github.inflationx:viewpump:$rootProject.viewPumpVersion"
}

private Dependency Stetho() {
    dependencies.implementation "com.facebook.stetho:stetho:$rootProject.stethoVersion"
}

private Dependency Gson() {
    dependencies.implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
}

private void RxJava() {
    //RX
    dependencies.implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"
    dependencies.implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"
}

private void Default() {
    dependencies.implementation "androidx.multidex:multidex:$rootProject.multiDexVersion"
    dependencies.implementation "androidx.cardview:cardview:$rootProject.cardViewVersion"
    dependencies.implementation "androidx.appcompat:appcompat:$rootProject.appCompactVersion"
    dependencies.implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintlayoutVersion"
    dependencies.implementation "androidx.legacy:legacy-support-v4:$rootProject.legacySupportVersion"
    dependencies.implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleExtensionsVersion"
    dependencies.implementation "com.google.android.material:material:$rootProject.materialVersion"
    dependencies.implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    dependencies.implementation "android.arch.navigation:navigation-fragment:$rootProject.navigationVersion"
    dependencies.implementation "android.arch.navigation:navigation-ui:$rootProject.navigationVersion"
    dependencies.implementation "androidx.core:core:$rootProject.coreVersion"
}

private void Test(){
    dependencies.testImplementation "junit:junit:$rootProject.jUnitVersion"
    dependencies.androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"
    dependencies.androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.expressoVersion"
}

private void Dagger() {
    //dagger
    dependencies.implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    dependencies.implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    dependencies.annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    dependencies.annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
}

private void Room() {
    // Room
    // RxJava support for Room
    dependencies.implementation "androidx.room:room-rxjava2:$rootProject.roomVersion"
    // ReactiveStreams support for LiveData
    dependencies.implementation "androidx.lifecycle:lifecycle-reactivestreams:$rootProject.reactiveStreamsVersion"
    dependencies.implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    dependencies.annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    dependencies.androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"
    // Lifecycle components
    dependencies.implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    dependencies.annotationProcessor "androidx.lifecycle:lifecycle-compiler:$rootProject.archLifecycleVersion"
}
